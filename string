1002. Find Common Characters
Solved
Easy
Topics
Companies
Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

 

Example 1:

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: words = ["cool","lock","cook"]
Output: ["c","o"]


 class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
       vector<int> cnt(26, INT_MAX);
       vector<string> res;
       for(auto s : A){
        vector<int> cnt1(26, 0);
        for(auto c : s){
            cnt1[c-'a']++;
        }
        for(int i = 0; i<26; i++){
            cnt[i] = min(cnt[i],cnt1[i]);
        }
       }
       for(int i = 0; i<26; i++){
        for(int j = 0; j<cnt[i]; j++){
            res.push_back(string(1,i+'a'));
        }
       }
       return res;
    }
};


846. Hand of Straights
Solved
Medium
Topics
Companies
Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

 
Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.

//solution ===========
class Solution {
public:
    bool check(vector<int>& hand, int groupSize, int j){
        int n = hand.size();
        int x = hand[j];
        hand[j]=-1;
        int count = 1;
        int i =0;
        while(count<groupSize && i<n){
            if(hand[i]==(x+1)){
                count++;
                x++;
                hand[i]=-1;
            }
            i++;
        }
        if(count==groupSize){
            return true;
        }
        else{
            return false;
        }
    }
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        int n = hand.size();
        if(n%groupSize!=0)return false;

        sort(hand.begin(),hand.end());

        for(int i=0;i<n;i++){
            if(hand[i]!=-1){
                if(check(hand,groupSize,i)==false){
                    return false;
                }
            }
        }

        return true;
    }
};


648. Replace Words
Solved
Medium
Topics
Companies
In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root "help" is followed by the word "ful", we can form a derivative "helpful".

Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.

Return the sentence after the replacement.

 

Example 1:

Input: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"
Example 2:

Input: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"
Output: "a a b c"

// solution ==============
class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        map<string,int>mp;
        for(auto &it: dictionary){
            mp[it]=1;
        }
        string ans="";
        string word="";
        bool ok=false;
        for(int i=0;i<sentence.size();i++){
            if(sentence[i]==' '){
                if(ok==false){
                    ans+=word;
                    ans+=" ";
                }
                word="";
                ok=false;
            }
            else{
                word+=sentence[i];
                if(mp[word]==1&&ok==false){
                    ans+=word;
                    ans+=" ";
                    ok=true;
                }
            }
        }
        if(ok==false){
            ans+=word;
        }
        else{
            ans.pop_back();
        }
        return ans;
    }
};


523. Continuous Subarray Sum
Solved
Medium
Topics
Companies
Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.


class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
       vector<int> pre(n);
       pre[0] = nums[0];
       for(int i = 1; i<n; i++){
           pre[i] = pre[i-1]+nums[i];
        }
      
        for(int i = 0; i<n; i++){
             pre[i] = pre[i]%k;
        }
        unordered_map<int,int> mp;
        mp[0]=-1;
        for(int i = 0; i<n; i++){
            if(mp.find(pre[i]) != mp.end()){
                int idx = mp[pre[i]];
                int d = i-idx;
                if(d >= 2){
                    return true;
                }
            }else{
                mp[pre[i]] = i;
            }
        }
        return false;
    }
};
