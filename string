1002. Find Common Characters
Solved
Easy
Topics
Companies
Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

 

Example 1:

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: words = ["cool","lock","cook"]
Output: ["c","o"]


 class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
       vector<int> cnt(26, INT_MAX);
       vector<string> res;
       for(auto s : A){
        vector<int> cnt1(26, 0);
        for(auto c : s){
            cnt1[c-'a']++;
        }
        for(int i = 0; i<26; i++){
            cnt[i] = min(cnt[i],cnt1[i]);
        }
       }
       for(int i = 0; i<26; i++){
        for(int j = 0; j<cnt[i]; j++){
            res.push_back(string(1,i+'a'));
        }
       }
       return res;
    }
};


846. Hand of Straights
Solved
Medium
Topics
Companies
Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

 

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.

//solution ===========
class Solution {
public:
    bool check(vector<int>& hand, int groupSize, int j){
        int n = hand.size();
        int x = hand[j];
        hand[j]=-1;
        int count = 1;
        int i =0;
        while(count<groupSize && i<n){
            if(hand[i]==(x+1)){
                count++;
                x++;
                hand[i]=-1;
            }
            i++;
        }
        if(count==groupSize){
            return true;
        }
        else{
            return false;
        }
    }
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        int n = hand.size();
        if(n%groupSize!=0)return false;

        sort(hand.begin(),hand.end());

        for(int i=0;i<n;i++){
            if(hand[i]!=-1){
                if(check(hand,groupSize,i)==false){
                    return false;
                }
            }
        }

        return true;
    }
};
